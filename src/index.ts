import { app, BrowserWindow, shell } from 'electron';
import { createDatabase } from './main/database';
import debug from 'electron-debug';
import unhandled from 'electron-unhandled';
import steamworks from 'steamworks.js';
import { register } from './main/register';
import installExtension, { REACT_DEVELOPER_TOOLS } from 'electron-devtools-assembler';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

debug();
unhandled();

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 720,
        width: 1280,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    mainWindow.on('ready-to-show', () => {
        if (!mainWindow) {
            throw new Error('"mainWindow" is not defined');
        }
    });

    //const menuBuilder = new MenuBuilder(mainWindow);
    //menuBuilder.buildMenu();

    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  
    mainWindow.removeMenu();

    mainWindow.webContents.setWindowOpenHandler(({ url }) => {
        shell.openExternal(url);
        return { action: 'deny' };
    });
  
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

app
    .whenReady()
    .then(async () => {
        await createDatabase();
        register();
        await installExtension(REACT_DEVELOPER_TOOLS);
    })
    .catch(console.log);

steamworks.electronEnableSteamOverlay();
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
