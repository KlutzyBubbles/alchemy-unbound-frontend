import Database from 'better-sqlite3';
import path from 'path';
import { Recipe } from './types';

export function connect() {
  return Database(
    path.join(__dirname, 'database.db'),
    { verbose: console.log, fileMustExist: true },
  );
}

export function createDatabase(): Promise<void> {
  return new Promise((resolve, reject) => {
    console.log('CeateDatabase')
    const db = connect();
    const stm = db.prepare(
      `PRAGMA journal_mode = WAL;
      CREATE TABLE IF NOT EXISTS recipes (
            a TEXT NOT NULL,
            b TEXT NOT NULL,
            result TEXT NOT NULL,
            display TEXT NOT NULL,
            emoji TEXT NOT NULL,
            depth INTEGER DEFAULT 1,
            who_discovered TEXT NOT NULL,
            base INTEGER DEFAULT FALSE
        );`
    );
    try {
      stm.run()
      var records = [
        {
          name: 'Earth',
          emoji: 'ðŸŒŽ'
        },
        {
          name: 'Fire',
          emoji: 'ðŸ”¥'
        },
        {
          name: 'Water',
          emoji: 'ðŸ’§'
        },
        {
          name: 'Air',
          emoji: 'ðŸ’¨'
        }
      ]

      records.forEach(async (item) => {
        var result = item.name.toLowerCase()
        var hasItem = await getRecipesFor(result)
        if (hasItem === null || hasItem === undefined || hasItem.length === 0) {
          await insertRecipe({
            a: '',
            b: '',
            result,
            display: item.name,
            emoji: item.emoji,
            depth: 0,
            who_discovered: '',
            base: 1
          })
        }
      })
      return resolve()
    } catch(e) {
      return reject(e)
    }
    
  });
}

function formatInput(input: any, prefix = '@'): any {
  var output: any = {};
  for (var key of Object.keys(input)) {
    output[`${prefix}${key}`] = input[key]
  }
  return output
}

export function insertRecipe(recipe: Recipe): Promise<void> {
  return new Promise((resolve, reject) => {
    const db = connect();
    const stm = db.prepare(
      'INSERT INTO recipes (a, b, result, display, emoji, depth, who_discovered, base) VALUES (@a, @b, @result, @display, @emoji, @depth, @who_discovered, @base)',
    );
    
    try {
      stm.run(formatInput(recipe))
      return resolve()
    } catch(e) {
      return reject(e)
    }
  })
}

export function deleteRecipe(a: string, b: string): Promise<void> {
  return new Promise((resolve, reject) => {
    const db = connect();

    const stm = db.prepare('DELETE FROM recipes WHERE (a = @a AND b = @b) OR (a = @b AND b = @a)');

    
    try {
      stm.run({ a, b })
      return resolve()
    } catch(e) {
      return reject(e)
    }
  });
}

export function getRecipe(a: string, b: string): Promise<Recipe | undefined> {
  return new Promise((resolve, reject) => {
    const db = connect();
    const stm = db.prepare('SELECT * FROM recipes where (a = @a AND b = @b) OR (a = @b AND b = @a)');

    try {
      var val = stm.get({ a, b })
      if (val !== undefined) {
        return resolve(val as Recipe)
      }
      return resolve(undefined)
    } catch(e) {
      return reject(e)
    }
  })
  // return stm.get({ a, b }) as Recipe;
}

export function getRecipesFor(result: string): Promise<Recipe[]> {
  return new Promise((resolve, reject) => {
    const db = connect();
    const stm = db.prepare('SELECT * FROM recipes where (result = @result)');

    try {
      var val = stm.all(formatInput({ result }))
      return resolve(val as Recipe[])
    } catch(e) {
      return reject(e)
    }
  })
}

export function getAllRecipes(): Promise<Recipe[]> {
  return new Promise((resolve, reject) => {
    const db = connect();
    const stm = db.prepare('SELECT * FROM recipes');

    try {
      var val = stm.all({})
      return resolve(val as Recipe[])
    } catch(e) {
      return reject(e)
    }
  })
}

export { Recipe };
